분석을 조금 진행해보면 여러가지 생각이 든다.
일단 데이터가 꽤나 큰 규모이기 때문에 발생하는 불편함들이 있다.
train, test data 의 shape 는 ((200000, 202), (200000, 201) 이렇다

feature 들은 var_0 , var_1 이런식으로 구분되어 있다. 그래서 감각적으로 어떤 feature 가 중요한지 볼 수 없다.
kaggle 에서 가장 많은 vote 를 받은 분의 EDA 글을 보면 features 의 분포도를 통해 feature 의 중요성을 판단하려고 한다.

 200개의 feature/ row 가 20만개(큰 규모)이기 때문에 처리속도가 느리다.
 내 노트북에서는 200개 feature를 100개 씩 나눠서 시각화하려면 4~5분 정도가 걸린다.
 
* 속도를 줄이고 싶어서 2가지 방법을 시도해보았음

1. thread
2. multprocessing
 
두 가지 기술은 자세히 들어가면 차이가 있는데 내가 이해한 부분은 결국엔 병렬처리를 할 수 있게 만들어줌

예를 들어 위 두가지 기술을 사용하지 않으면

for i in range(100):
  print(1)
  print(2)
  
이 코드를 실행하면 1을 100번 2를 100번 순차적으로 print 한다. (직렬) 

하지만 thread or multprocessing 을 실행하면

1, 2 를 섞어가며 print 해준다. (병렬)

사람으로 치면 
  전자는 한 사람이 1을 100번 쓰고 2를 100번 쓰는 거고
  후자는 두 사람이서 일을 하는데 한 사람은 1을 100번 쓰고 나머지 한 사람은 2를 100번 쓴다.

1.thread 


파이썬의 경우 gil(Global interpreter lock)이 설정되어 있어 여러 쓰레드를 사용하지 못한다고 한다. java, c 같은 경우에는 가능함

그래서 파이썬에서 thread 를 진행하면 조금 특이하게 진행이 된다.

1,2 가 섞여서 출력되기는 한다. 그런데 동시에 진행되는게 아니라
교대로 진행되는 것 같다.

사람 1이 1번을 print 하다가 잠시 쉬게되면
사람 2가 2번을 print 한다.
사람 2가 잠시 쉬면 다시 사람1이 1번을 print 한다.

그니까 현실로 치면 교대근무를 하는 것이 된다. 우리가 원하는 것은 교대근무가 아니라 분업인데...

2.multiprocessing

이것도 어렵다. 제대로 알려면 프로세스 < 이 뜻이 먼질 알아야 된다.

결론은 이것도 파이썬으로 실행해보면 1,2가 섞여서 출력되긴 한다.
그런데 직렬 처리하는거랑 시간 차이가 안난다.

분명히 동시 작업이면 시간이 줄어야 정상인데 말이다.

어지럽다. 일단은 여기까지만 알고 분석을 진행한 다음

multiprocessing / thread 에 대해서 공부해보려고한다.






